package Learn.Leetcode;

public class BitOp {

    /**
     * 计算x的n次幂
     * 使用快速幂算法实现，时间复杂度为O(log n)
     * <p>
     * 快速幂算法原理：
     * 利用指数的二进制表示，将幂运算分解为若干次平方运算和乘法运算
     * 例如：计算 3^10，10的二进制为1010
     * 3^10 = 3^(2^3 * 1 + 2^2 * 0 + 2^1 * 1 + 2^0 * 0)
     * = 3^(8*1) * 3^(4*0) * 3^(2*1) * 3^(1*0)
     * = 3^8 * 3^2
     * <p>
     * 算法步骤：
     * 1. 将指数n转换为二进制形式
     * 2. 从右到左遍历二进制位
     * 3. 对于每一位为1的位置，将对应的幂次项乘入结果
     * 4. 底数不断平方，指数不断除以2
     *
     * @param x 底数
     * @param n 指数
     * @return x的n次幂的结果
     */
    //50. Pow(x, n)
    public double myPow(double x, int n) {
        // 处理底数为0的特殊情况
        if (x == 0.0) {
            return 0.0;
        }

        // 处理负指数的情况，转换为正指数计算
        if (n < 0) {
            x = 1.0 / x;
            n = -n;
        }

        double ans = 1.0;
        // 快速幂算法核心逻辑
        while (n != 0) {
            // 如果指数的二进制最低位为1，则将当前x乘入结果
            if ((n & 1) == 1) {
                ans *= x;
            }
            // x自乘，相当于幂次翻倍
            x *= x;
            // 指数右移一位，相当于除以2
            n = n >> 1;
        }
        return ans;
    }

}
